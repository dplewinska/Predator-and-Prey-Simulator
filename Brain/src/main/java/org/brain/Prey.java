package org.brain;

import org.javatuples.Pair;
import java.util.ArrayList;
import java.util.Collections;
import static java.lang.Thread.sleep;

/**
 * runnable class prey inheriting from animal, can drink, eat, hide and reproduce
 */
public class Prey extends Animal implements Runnable {
    private int water;
    private int energy;
    private Location target = null;
    private ArrayList<Pair<Integer,Integer>> moves = new ArrayList();

    public Prey(String n, String sn, int s, int st, Pair<Integer, Integer> p, int h, int w, int e) throws InterruptedException {
        setName(n);
        setSpeciesName(sn);
        setSpeed(s);
        setStrength(st);
        setPosition(p);
        setHealth(h);
        setWater(w);
        setEnergy(e);
        world.addAnimal(this);
        world.addPrey(this);
        gui.updatePrey(String.format("\nbirth: %s", getName()));
        Thread thread = new Thread(this);
        thread.start();
    }

    public int getWater() {return water;}
    public int getEnergy() {return energy;}
    public Location getTarget() {return target;}
    public String getTargetString() {
        if (getTarget() != null) {
            return getTarget().getName();
        }
        return null;
    }
    public void setWater(int w) {water = w;}
    public void setEnergy(int e) {energy = e;}
    public void setTarget(Location t) {target = t;}

    public String toString() {
        return String.format("name: %s\nspecies: %s\nstrength: %d\nhealth: %d\nwater: %d\nenergy: %d\ntarget: %s",
                getName(), getSpeciesName(), getStrength(), getHealth(), getWater(), getEnergy(), getTargetString());
    }

    /**
     * in each turn the prey moves to a selected target with its speed or dies
     */
    public void run() {
        while (true) {
            if (getWater() <= 0 || getEnergy() <= 0 || getHealth() <=0 || isDead()) {
                try {
                    die();
                    gui.updatePrey(String.format("\ndeath: %s", getName()));
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                break;
            }
            try {
                sleep(getSpeed());
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            try {
                move();
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            setWater(water - 5);
            setEnergy(energy - 5);
        }
    }

    /**
     * changes position of the Prey
     * @throws InterruptedException
     */
    public void move() throws InterruptedException {
        if (getTarget() == null) {
            if (getWater() <= getHealth() && getWater() <= getEnergy()) {
                ArrayList<Source> waterSources = world.getWaterSources();
                Collections.shuffle(waterSources);
                setTarget(waterSources.get(0));
            }
            else if (getEnergy() <= getHealth() && getEnergy() <= getWater()) {
                ArrayList<Source> foodSources = world.getFoodSources();
                Collections.shuffle(foodSources);
                setTarget(foodSources.get(0));
            } else {
                ArrayList<Hideout> hideouts = world.getHideouts();
                Collections.shuffle(hideouts);
                setTarget(hideouts.get(0));
            }
            setMoves();
        }
        Pair<Integer, Integer> pair;
        if (moves.size() > 0) {
            pair = moves.get(0);
            moves.remove(0);
        } else {
            pair = world.getAvailablePosition(getPosition());
        }
        world.removeOccupiedPositions(getPosition());
        gui.updateIcon(getPosition());
        int isIntersection = world.isIntersection(pair);
        if (isIntersection >= 0) {
            while (!world.getIntersections().get(isIntersection).tryEnter()) {
                sleep(getSpeed());
            }
        }
        int wasIntersection = world.isIntersection(getPosition());
        if (wasIntersection >= 0) {
            world.getIntersections().get(wasIntersection).leave();
        }
        setPosition(new Pair<>(pair.getValue0(), pair.getValue1()));
        world.addOccupiedPositions(getPosition());
        gui.updateIcon(getPosition());
        availablePositions.clear();
        if (getTarget().getPosition().compareTo(getPosition()) == 0) {
            getTarget().use(this);
        }
    }

    /**
     * sets the list of future moves to moves generated by a-star
     */
    public void setMoves() {
        moves = Astar.aStar(new Astar.Node(getPosition()), new Astar.Node(getTarget().getPosition()));
    }
}
